 npm create vite@latest client


using above  command we are using vite 
and also folder will be created named client
folder contains public src folder and some other package.json ,index.html along with some other files 

here we are given option 
react -> javascript + swc(lighter and faster)

then go inside client folder 
and use npm i 
to install all dependencies of package.json 

after that we will use install 
tailwind vite 

now we will add all pages[about, profile, home, sigin, signout] inside src folder
we have to install react-router-dom
then we will add route in app.jsx


now we will work on individual component like Header 
here we will be having three section 
logo ->search bar -> navigation items 


 header will remain on top of each pages
 that's why it is defined at top of routes

 to install react icons 
 we will use 
 npm i react-icons


now we will all adding navigation links to header 
which will be remain invisible for small screens 
here we will use link so that we can easily switch to another domain 
without refreshing the page 

to use it we have to wrap li in link tag
 
 express is used for writing backend code and all apis 
 nodemon is used so that we don't have to restart the server for each change
 

 now we will be having api(backend code) and client(frontend code)


  to make package.json file 
  npm init -y 
  to add dependencies
  npm i name


to run the file from root directory 
we will use command 
node then file location 
like 
node api/index.js

we use nodemon in development and node in production

kya mastcheez hai bhai 

 "scripts": {
    "dev": "nodemon api/index.js",
    "start": "node api/index.js"
  },

using node run dev/start we can control the command 


CONNECT TO THE DATABASE
now we will connect to mongodb online database 
it will be facilitated by using mongoose 


for mongodb 
username : nitishkamath63590
password : nitishkamath63590

since we are uploading file on github or it is publicly available 
it is not recommended to expose the mongodb path 
that why we will use .env file 
for use of that file we need to install dotenv 
and will add this file to .gitignore

to use it
mongoose.connect(process.env.MONGO);


now we will create user model 
since we are connected to database 
so in order to prevent entry we have to define constraint  
so in api folder we will main user.model.js 
there we will define constraint for name, email, password, timstamp

now we will define various router at backend 
so main skeleton will be index.js from api folder 
here we will import various router 
and will give redirect as 
app.use("/api/user", userRouter);
and actual url will be 
localhost:3000/api/user/test[go to original file to check for end point ]

there are three level nesting 
index.js -> user.route.js -> user.controller.js 

index.js -> base url  
user.route.js -> end point
user.controller.js -> defintion


now we will create signup route api 
to check for this we can use 
insomnia or postman 

by default we cann't send json to web server 
but using app.user(express.json()) we can do it

now since we are sucessfully able to connnect to database 
now we will destructure all details
and will save to database 
and will check for any error using try and catch block

password is saved in database as it is 
so we will use bcyrpt module to hashit but we have to use add some salt value 

location of data 
https://cloud.mongodb.com/v2/668515a81e802d5ac2c5ea67#/metrics/replicaSet/6685166d2ef8322264047a2e/explorer/mern-estate/users/find

so far so good 
now we will use middleware in index.js to show error 
we will also define manual error that we may have to show in some case 
with manual status code and manual message  [api -> utils->error.js]


app.use((err, req, res, next) => {


error is error thrown by server
request added by browser
response received by browser
next it is used to use middleware

if we have to use middleware 
we can use it as:
next(message)


Now we will make a signup page ui 
with field such as username email and password

Now we will add functionality 
and connect to the database

here some thing to be noted
that while filling the other field we have to keep other details as it is
also while submit the form we wi  ll take care that page is not refreshed 
to add base url we will modify vite.config.js

if everything is successful we will redirec use to sigin page 
here we have done error handling for same username and same email
we have all make the button disabled 

now we will define sign in api route in auth.controller.js file 

next is a middleware

now we have concept of jwt(json web token) that gives us a token 
craeted usign id and it will be used to change the password and or do any activity after user log in 
it does not have any end time but have session time 


import needs curly braces for named exports and doesn't need them for the default one.

since we have already defined route for sign in page 
now we will define ui functionality and coneect to the database

it will be somewhat similar to sign up page ui 

=> Complete Sign In page Functionality
now we will we do registration on sign up page 
then do log in on sign in page 
now we will check cookie 
also check with wrong usename and wrong password 



=> Add Redux toolkit
now we will use redux to store the cooking information and 
make all the profile information global rather than passing that information to each page.


=> Add redux persist 
now we will add redux persist so that when we refresh the page 
we are not log out 
and user data is store on local machine 
not any crucial information related to that user ony

=> Add Google Auth functionality
now we will try to do registration/log in with google account 
fro this we have to set up firebase and give access
in terms firebase shares email,username and profile image url 
we have to set up .env file on client side
now we will make frontend as well as backend for route 
let suppose we are on registration so we need to store all value in database 
we will use same email 
for username we will convert into lowercase without space and some extra character
we will manually make password , user can futher change it 

let we are sign in so email, username and photourl will be local broswer 
we will extract it,  make json object out of it and send it to backend for futher storage


to use avatar we must define it in schema 
so that we can save it 
we need avatar to show image 
by default in some case let suppose if user doesn't have that 
then we can give them a default profile image 

also each time Google Authentication is successful we must redirect to home page 


=> Update the Header and make the profile page private 
here we aim at all page Authentication when user is log out 
if anyone tries to directly open the profile page using url 
then it must redirect to the sign in page 

selector is use to select the state that is global 

<Route element={<PrivateRoute />}>
  <Route path="/profile" element={<Profile />} />
</Route>


PrivateRoute route is used to check if there is Authentication or not 
if yes 
the profile page will be rendered 
if not then profile page will not be rendered


<Link to="/profile">
  {currentUser ? (
    <img
      className="rounded-full h-7 w-7 object-cover"
      src={currentUser.avatar}
      alt="profile"
    />
  ) : (
    <li className="text-slate-700 hover:underline">Sign in</li>
  )}
</Link>



If currentUser exists (meaning the user is authenticated), an <img> tag is rendered
 displaying the user's avatar. 
The src attribute of the <img> tag is populated with currentUser.avatar.

If currentUser does not exist (user is not authenticated), a simple "Sign in" text link is rendered.



PrivateRoute acts as a wrapper around routes that require authentication.
It uses Redux (useSelector) to check if the currentUser is authenticated.
If authenticated (currentUser exists), it renders the nested child routes (<Outlet />).
If not authenticated (currentUser does not exist), it redirects the user to the /sign-in route (<Navigate to="/sign-in" />).


BT ho gya
named .js file and wrote .jsx code
Bhaiya development speed apne haat me nahi hai :)


=> Complete Profile Page UI 
when user click on profile icon on header 
it will redirect to profile page 


=> Complete image upload Functionality
so when user is on profile page 
then on clicking on image, he may update the image 
here we will make referece and add onclick event on image 

we have to also modify the firebase 
so that we have take access to storage and allow to upload 

we will limit to upload of 2 mb of image file only 


=> Complete Image Upload 
now we will upload image 
we will show transition from 0 to 100 
we will also handle error for file upload 

maintaining the previous session 